        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:23
        -:    0:Programs:23
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 2728863 returned 100% blocks executed 100%
  2728863:    8:int compare(const void* a, const void* b) {
  2728863:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 46% (fallthrough)
branch  1 taken 54%
  1268918:   10:    return 1;
  1459945:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 35% (fallthrough)
branch  1 taken 65%
   516902:   12:    return -1;
   943043:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 1150 returned 100% blocks executed 97%
     1150:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
     1150:   44:  SelectStream(1);
call    0 returned 100%
     1150:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
     1150:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
     1150:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
    12150:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
   121100:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
   110100:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
        -:   62:	    {
       50:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
     1100:   73:  if (numPlayers == 2)
branch  0 taken 29% (fallthrough)
branch  1 taken 71%
        -:   74:    {
      321:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
      779:   77:  else if (numPlayers == 3)
branch  0 taken 51% (fallthrough)
branch  1 taken 49%
        -:   78:    {
      396:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
      383:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
     1100:   87:  if (numPlayers == 2)
branch  0 taken 29% (fallthrough)
branch  1 taken 71%
        -:   88:    {
      321:   89:      state->supplyCount[estate] = 8;
      321:   90:      state->supplyCount[duchy] = 8;
      321:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
      779:   95:      state->supplyCount[estate] = 12;
      779:   96:      state->supplyCount[duchy] = 12;
      779:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
     1100:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     1100:  102:  state->supplyCount[silver] = 40;
     1100:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
    23100:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
   184345:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
   172733:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
    10388:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 95% (fallthrough)
branch  1 taken 5%
branch  2 taken 6% (fallthrough)
branch  3 taken 94%
        -:  114:		{
     2250:  115:		  if (numPlayers == 2){ 
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
      306:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
      819:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
     9263:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
    10388:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
   162345:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
     4462:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  139:    {
     3362:  140:      state->deckCount[i] = 0;
    13448:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
    10086:  143:	  state->deck[i][j] = estate;
    10086:  144:	  state->deckCount[i]++;
        -:  145:	}
    26896:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
    23534:  148:	  state->deck[i][j] = copper;
    23534:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
     4462:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  155:    {
     3362:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
     4462:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
     3362:  166:      state->handCount[i] = 0;
     3362:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
    30800:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
    29700:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
     1100:  182:  state->outpostPlayed = 0;
     1100:  183:  state->phase = 0;
     1100:  184:  state->numActions = 1;
     1100:  185:  state->numBuys = 1;
     1100:  186:  state->playedCardCount = 0;
     1100:  187:  state->whoseTurn = 0;
     1100:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
     6600:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
     5500:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
     1100:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
     1100:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 98575 returned 100% blocks executed 100%
    98575:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
    98575:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
    98575:  209:  if (state->deckCount[player] < 1)
branch  0 taken 12% (fallthrough)
branch  1 taken 88%
    11599:  210:    return -1;
    86976:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
  1217651:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 92%
branch  1 taken 8% (fallthrough)
  1043699:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
  1043699:  216:    newDeck[newDeckPos] = state->deck[player][card];
  1043699:  217:    newDeckPos++;
  4924886:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 79%
branch  1 taken 21% (fallthrough)
  3881187:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
  1043699:  221:    state->deckCount[player]--;
        -:  222:  }
  1130675:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 92%
branch  1 taken 8% (fallthrough)
  1043699:  224:    state->deck[player][i] = newDeck[i];
  1043699:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
    86976:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 74241 returned 100% blocks executed 80%
    74241:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    74241:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    74241:  237:  if (state->phase != 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    74241:  243:  if ( state->numActions < 1 )
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    74241:  249:  card = handCard(handPos, state);
call    0 returned 100%
        -:  250:	
        -:  251:  //check if selected card is an action
    74241:  252:  if ( card < adventurer || card > treasure_map )
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    74241:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 returned 100%
branch  1 taken 32% (fallthrough)
branch  2 taken 68%
        -:  259:    {
    24083:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    50158:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    50158:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 returned 100%
        -:  268:	
    50158:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 183520 returned 100% blocks executed 93%
   183520:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
   183520:  280:  who = state->whoseTurn;
        -:  281:
   183520:  282:  if (state->numBuys < 1){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
   183520:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 returned 100%
branch  1 taken 41% (fallthrough)
branch  2 taken 59%
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    74369:  289:    return -1;
   109151:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
     1186:  293:    return -1;
        -:  294:  } else {
   107965:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
   107965:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 returned 100%
        -:  298:  
   107965:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 returned 100%
   107965:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
   107965:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 1937056 returned 100% blocks executed 100%
  1937056:  311:int numHandCards(struct gameState *state) {
  1937056:  312:  return state->handCount[ whoseTurn(state) ];
call    0 returned 100%
        -:  313:}
        -:  314:
function handCard called 12585209 returned 100% blocks executed 100%
 12585209:  315:int handCard(int handPos, struct gameState *state) {
 12585209:  316:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
 12585209:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 301675 returned 100% blocks executed 100%
   301675:  320:int supplyCount(int card, struct gameState *state) {
   301675:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 61673 returned 100% blocks executed 100%
    61673:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    61673:  326:  int count = 0;
        -:  327:
   502518:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 taken 88%
branch  1 taken 12% (fallthrough)
        -:  329:    {
   440845:  330:      if (state->deck[player][i] == card) count++;
branch  0 taken 7% (fallthrough)
branch  1 taken 93%
        -:  331:    }
        -:  332:
   358352:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -:  334:    {
   296679:  335:      if (state->hand[player][i] == card) count++;
branch  0 taken 7% (fallthrough)
branch  1 taken 93%
        -:  336:    }
        -:  337:
   821336:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 92%
branch  1 taken 8% (fallthrough)
        -:  339:    {
   759663:  340:      if (state->discard[player][i] == card) count++;
branch  0 taken 8% (fallthrough)
branch  1 taken 92%
        -:  341:    }
        -:  342:
    61673:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 14781176 returned 100% blocks executed 100%
 14781176:  346:int whoseTurn(struct gameState *state) {
 14781176:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 183520 returned 100% blocks executed 100%
   183520:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
   183520:  353:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -:  354:  
        -:  355:  //Discard hand
  1085819:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
   902299:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
   902299:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
   183520:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
   183520:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
   122245:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    61275:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
   183520:  370:  state->outpostPlayed = 0;
   183520:  371:  state->phase = 0;
   183520:  372:  state->numActions = 1;
   183520:  373:  state->coins = 0;
   183520:  374:  state->numBuys = 1;
   183520:  375:  state->playedCardCount = 0;
   183520:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
  1101120:  380:  for (k = 0; k < 5; k++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
   917600:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 returned 100%
        -:  382:  }
        -:  383:
        -:  384:  //Update money
   183520:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 returned 100%
        -:  386:
   183520:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 184722 returned 100% blocks executed 100%
   184722:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
   184722:  395:  if (state->supplyCount[province] == 0)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -:  396:    {
      200:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
   184522:  401:  j = 0;
  4797572:  402:  for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  403:    {
  4613050:  404:      if (state->supplyCount[i] == 0)
branch  0 taken 3% (fallthrough)
branch  1 taken 97%
        -:  405:	{
   148202:  406:	  j++;
        -:  407:	}
        -:  408:    }
   184522:  409:  if ( j >= 3)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -:  410:    {
      950:  411:      return 1;
        -:  412:    }
        -:  413:
   183572:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 190444 returned 100% blocks executed 100%
   190444:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
   190444:  420:  int score = 0;
        -:  421:  //score from hand
  1103489:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -:  423:    {
   913045:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 taken 7% (fallthrough)
branch  1 taken 93%
   913045:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 taken 21% (fallthrough)
branch  1 taken 79%
   913045:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
   913045:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
   913045:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
   913045:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
call    2 returned 100%
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
  1348012:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 86%
branch  1 taken 14% (fallthrough)
        -:  434:    {
  1157568:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 taken 8% (fallthrough)
branch  1 taken 92%
  1157568:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
  1157568:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 taken 3% (fallthrough)
branch  1 taken 97%
  1157568:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
  1157568:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
  1157568:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
call    2 returned 100%
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
  1348012:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 86%
branch  1 taken 14% (fallthrough)
        -:  445:    {
  1157568:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 taken 8% (fallthrough)
branch  1 taken 92%
  1157568:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 taken 21% (fallthrough)
branch  1 taken 79%
  1157568:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 taken 3% (fallthrough)
branch  1 taken 97%
  1157568:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
  1157568:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
  1157568:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
call    2 returned 100%
        -:  452:    }
        -:  453:
   190444:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 1150 returned 100% blocks executed 100%
     1150:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
     5750:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
     4600:  467:      if (i >= state->numPlayers)
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        -:  468:	{
     1138:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
     3462:  473:	  players[i] = scoreFor (i, state);
call    0 returned 100%
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
     1150:  478:  j = 0;
     5750:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  480:    {
     4600:  481:      if (players[i] > players[j])
branch  0 taken 19% (fallthrough)
branch  1 taken 81%
        -:  482:	{
      864:  483:	  j = i;
        -:  484:	}
        -:  485:    }
     1150:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
     1150:  489:  currentPlayer = whoseTurn(state);
call    0 returned 100%
     5750:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  491:    {
     4600:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 taken 26% (fallthrough)
branch  1 taken 74%
branch  2 taken 36% (fallthrough)
branch  3 taken 64%
        -:  493:	{
      439:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
     1150:  499:  j = 0;
     5750:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  501:    {
     4600:  502:      if ( players[i] > players[j] )
branch  0 taken 19% (fallthrough)
branch  1 taken 81%
        -:  503:	{
      885:  504:	  j = i;
        -:  505:	}
        -:  506:    }
     1150:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
     5750:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  511:    {
     4600:  512:      if ( players[i] == highScore )
branch  0 taken 26% (fallthrough)
branch  1 taken 74%
        -:  513:	{
     1197:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
     3403:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
     1150:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 959652 returned 100% blocks executed 100%
   959652:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
   959652:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 10% (fallthrough)
branch  1 taken 90%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
  1097396:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 92%
branch  1 taken 8% (fallthrough)
  1004186:  534:      state->deck[player][i] = state->discard[player][i];
  1004186:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    93210:  538:    state->deckCount[player] = state->discardCount[player];
    93210:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    93210:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    93210:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    93210:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    93210:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    93210:  559:    if (deckCounter == 0)
branch  0 taken 12% (fallthrough)
branch  1 taken 88%
    11269:  560:      return -1;
        -:  561:
    81941:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    81941:  563:    state->deckCount[player]--;
    81941:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
   866442:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
   866442:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
   866442:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
   866442:  576:    state->deckCount[player]--;
   866442:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
   948383:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 222084 returned 100% blocks executed 87%
   222084:  583:int getCost(int cardNumber)
        -:  584:{
   222084:  585:  switch( cardNumber ) 
branch  0 taken 12%
branch  1 taken 11%
branch  2 taken 3%
branch  3 taken 4%
branch  4 taken 15%
branch  5 taken 10%
branch  6 taken 5%
branch  7 taken 1%
branch  8 taken 2%
branch  9 taken 2%
branch 10 taken 2%
branch 11 taken 2%
branch 12 taken 3%
branch 13 taken 2%
branch 14 taken 5%
branch 15 taken 2%
branch 16 taken 5%
branch 17 taken 2%
branch 18 taken 0%
branch 19 taken 1%
branch 20 taken 4%
branch 21 taken 2%
branch 22 taken 5%
branch 23 taken 0%
branch 24 taken 2%
branch 25 taken 2%
branch 26 taken 0%
branch 27 taken 0%
        -:  586:    {
        -:  587:    case curse:
    27210:  588:      return 0;
        -:  589:    case estate:
    23841:  590:      return 2;
        -:  591:    case duchy:
     7193:  592:      return 5;
        -:  593:    case province:
     8211:  594:      return 8;
        -:  595:    case copper:
    32961:  596:      return 0;
        -:  597:    case silver:
    21862:  598:      return 3;
        -:  599:    case gold:
    11109:  600:      return 6;
        -:  601:    case adventurer:
     1020:  602:      return 6;
        -:  603:    case council_room:
     4787:  604:      return 5;
        -:  605:    case feast:
     3499:  606:      return 4;
        -:  607:    case gardens:
     4693:  608:      return 4;
        -:  609:    case mine:
     3386:  610:      return 5;
        -:  611:    case remodel:
     5785:  612:      return 4;
        -:  613:    case smithy:
     4233:  614:      return 4;
        -:  615:    case village:
    10487:  616:      return 3;
        -:  617:    case baron:
     3926:  618:      return 4;
        -:  619:    case great_hall:
     9996:  620:      return 3;
        -:  621:    case minion:
     3515:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
     3008:  626:      return 5;
        -:  627:    case ambassador:
     8288:  628:      return 3;
        -:  629:    case cutpurse:
     4087:  630:      return 4;
        -:  631:    case embargo: 
    10362:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
     3714:  636:      return 4;
        -:  637:    case sea_hag:
     4911:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
function cardEffect called 74241 returned 100% blocks executed 65%
    74241:  645:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  646:
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
    74241:  653:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
    74241:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
    74241:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  /*
        -:  658:   * Unused variables after refactorring
        -:  659:  int temphand[MAX_HAND];// moved above the if statement
        -:  660:  int drawntreasure=0;
        -:  661:  int cardDrawn;
        -:  662:  int z = 0;// this is the counter for the temp hand
        -:  663:  */
    74241:  664:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 32% (fallthrough)
branch  1 taken 68%
    23449:  665:    nextPlayer = 0;
        -:  666:  }
        -:  667:  
        -:  668:	
        -:  669:  //uses switch to select card and perform actions
    74241:  670:  switch( card ) 
branch  0 taken 2%
branch  1 taken 3%
branch  2 taken 0%
branch  3 taken 16%
branch  4 taken 8%
branch  5 taken 0%
branch  6 taken 2%
branch  7 taken 6%
branch  8 taken 13%
branch  9 taken 6%
branch 10 taken 2%
branch 11 taken 0%
branch 12 taken 8%
branch 13 taken 11%
branch 14 taken 3%
branch 15 taken 7%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 14%
branch 19 taken 0%
branch 20 taken 0%
        -:  671:    {
        -:  672:    case adventurer:
     1575:  673:    	return adventureCard(currentPlayer,state);
call    0 returned 100%
        -:  674:    case council_room:
     1911:  675:    	return council_roomCard(currentPlayer,state,handPos );
call    0 returned 100%
        -:  676:			
        -:  677:    case feast:
    #####:  678:    	return feastCard(currentPlayer,state,choice1);
call    0 never executed
        -:  679:			
        -:  680:    case gardens:
    11538:  681:      return -1;
        -:  682:			
        -:  683:    case mine:
     5912:  684:    	return mineCard(currentPlayer,state,choice1,choice2,handPos);
call    0 returned 100%
        -:  685:			
        -:  686:    case remodel:
    #####:  687:    	return remodelCard(currentPlayer,state,choice1,choice2,handPos);
call    0 never executed
        -:  688:		
        -:  689:    case smithy:
        -:  690:      //+3 Cards
     7344:  691:      for (i = 0; i < 3; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  692:	{
     5508:  693:	  drawCard(currentPlayer, state);
call    0 returned 100%
        -:  694:	}
        -:  695:			
        -:  696:      //discard card from hand
     1836:  697:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
     1836:  698:      return 0;
        -:  699:		
        -:  700:    case village:
        -:  701:      //+1 Card
     4570:  702:      drawCard(currentPlayer, state);
call    0 returned 100%
        -:  703:			
        -:  704:      //+2 Actions
     4570:  705:      state->numActions = state->numActions + 2;
        -:  706:			
        -:  707:      //discard played card from hand
     4570:  708:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
     4570:  709:      return 0;
        -:  710:		
        -:  711:    case baron:
     9498:  712:      state->numBuys++;//Increase buys by 1!
     9498:  713:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
     9498:  714:	int p = 0;//Iterator for hand!
     9498:  715:	int card_not_discarded = 1;//Flag for discard set!
    61497:  716:	while(card_not_discarded){
branch  0 taken 82%
branch  1 taken 18% (fallthrough)
    42501:  717:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 taken 13% (fallthrough)
branch  1 taken 87%
     5533:  718:	    state->coins += 4;//Add 4 coins to the amount of coins
     5533:  719:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
     5533:  720:	    state->discardCount[currentPlayer]++;
    23985:  721:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 taken 77%
branch  1 taken 23% (fallthrough)
    18452:  722:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  723:	    }
     5533:  724:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
     5533:  725:	    state->handCount[currentPlayer]--;
     5533:  726:	    card_not_discarded = 0;//Exit the loop
        -:  727:	  }
    36968:  728:	  else if (p > state->handCount[currentPlayer]){
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
        -:  729:	    if(DEBUG) {
        -:  730:	      printf("No estate cards in your hand, invalid choice\n");
        -:  731:	      printf("Must gain an estate if there are any\n");
        -:  732:	    }
     3965:  733:	    if (supplyCount(estate, state) > 0){
call    0 returned 100%
branch  1 taken 15% (fallthrough)
branch  2 taken 85%
      598:  734:	      gainCard(estate, state, 0, currentPlayer);
call    0 returned 100%
      598:  735:	      state->supplyCount[estate]--;//Decrement estates
      598:  736:	      if (supplyCount(estate, state) == 0){
call    0 returned 100%
branch  1 taken 9% (fallthrough)
branch  2 taken 91%
       52:  737:		isGameOver(state);
call    0 returned 100%
        -:  738:	      }
        -:  739:	    }
     3965:  740:	    card_not_discarded = 0;//Exit the loop
        -:  741:	  }
        -:  742:			    
        -:  743:	  else{
    33003:  744:	    p++;//Next card
        -:  745:	  }
        -:  746:	}
        -:  747:      }
        -:  748:			    
        -:  749:      else{
    #####:  750:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  751:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  752:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  753:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  754:	    isGameOver(state);
call    0 never executed
        -:  755:	  }
        -:  756:	}
        -:  757:      }
        -:  758:	    
        -:  759:      
     9498:  760:      return 0;
        -:  761:		
        -:  762:    case great_hall:
        -:  763:      //+1 Card
     4268:  764:      drawCard(currentPlayer, state);
call    0 returned 100%
        -:  765:			
        -:  766:      //+1 Actions
     4268:  767:      state->numActions++;
        -:  768:			
        -:  769:      //discard card from hand
     4268:  770:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
     4268:  771:      return 0;
        -:  772:		
        -:  773:    case minion:
        -:  774:      //+1 action
     1503:  775:      state->numActions++;
        -:  776:			
        -:  777:      //discard card from hand
     1503:  778:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -:  779:			
     1503:  780:      if (choice1)		//+2 coins
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  781:	{
     1503:  782:	  state->coins = state->coins + 2;
        -:  783:	}
        -:  784:			
    #####:  785:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  786:	{
        -:  787:	  //discard hand
    #####:  788:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  789:	    {
    #####:  790:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  791:	    }
        -:  792:				
        -:  793:	  //draw 4
    #####:  794:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  795:	    {
    #####:  796:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  797:	    }
        -:  798:				
        -:  799:	  //other players discard hand and redraw if hand size > 4
    #####:  800:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  801:	    {
    #####:  802:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  803:		{
    #####:  804:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  805:		    {
        -:  806:		      //discard hand
    #####:  807:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  808:			{
    #####:  809:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  810:			}
        -:  811:							
        -:  812:		      //draw 4
    #####:  813:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  814:			{
    #####:  815:			  drawCard(i, state);
call    0 never executed
        -:  816:			}
        -:  817:		    }
        -:  818:		}
        -:  819:	    }
        -:  820:				
        -:  821:	}
     1503:  822:      return 0;
        -:  823:		
        -:  824:    case steward:
    #####:  825:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  826:	{
        -:  827:	  //+2 cards
    #####:  828:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  829:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  830:	}
    #####:  831:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  832:	{
        -:  833:	  //+2 coins
    #####:  834:	  state->coins = state->coins + 2;
        -:  835:	}
        -:  836:      else
        -:  837:	{
        -:  838:	  //trash 2 cards in hand
    #####:  839:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  840:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  841:	}
        -:  842:			
        -:  843:      //discard card from hand
    #####:  844:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  845:      return 0;
        -:  846:		
        -:  847:    case tribute:
     6046:  848:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
      219:  849:	if (state->deckCount[nextPlayer] > 0){
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        1:  850:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
        1:  851:	  state->deckCount[nextPlayer]--;
        -:  852:	}
      218:  853:	else if (state->discardCount[nextPlayer] > 0){
branch  0 taken 91% (fallthrough)
branch  1 taken 9%
      199:  854:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
      199:  855:	  state->discardCount[nextPlayer]--;
        -:  856:	}
        -:  857:	else{
        -:  858:	  //No Card to Reveal
        -:  859:	  if (DEBUG){
        -:  860:	    printf("No cards to reveal\n");
        -:  861:	  }
        -:  862:	}
        -:  863:      }
        -:  864:	    
        -:  865:      else{
     5827:  866:	if (state->deckCount[nextPlayer] == 0){
branch  0 taken 29% (fallthrough)
branch  1 taken 71%
     7566:  867:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 taken 78%
branch  1 taken 22% (fallthrough)
     5893:  868:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
     5893:  869:	    state->deckCount[nextPlayer]++;
     5893:  870:	    state->discard[nextPlayer][i] = -1;
     5893:  871:	    state->discardCount[nextPlayer]--;
        -:  872:	  }
        -:  873:			    
     1673:  874:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 returned 100%
        -:  875:	} 
     5827:  876:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
     5827:  877:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
     5827:  878:	state->deckCount[nextPlayer]--;
     5827:  879:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
     5827:  880:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
     5827:  881:	state->deckCount[nextPlayer]--;
        -:  882:      }    
        -:  883:		       
     6046:  884:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 taken 23% (fallthrough)
branch  1 taken 77%
     1383:  885:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
     1383:  886:	state->playedCardCount++;
     1383:  887:	tributeRevealedCards[1] = -1;
        -:  888:      }
        -:  889:
    24184:  890:      for (i = 0; i <= 2; i ++){
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
    18138:  891:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 taken 84% (fallthrough)
branch  1 taken 16%
branch  2 taken 95% (fallthrough)
branch  3 taken 5%
branch  4 taken 1% (fallthrough)
branch  5 taken 99%
     3991:  892:	  state->coins += 2;
        -:  893:	}
        -:  894:		    
    14147:  895:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 taken 92% (fallthrough)
branch  1 taken 8%
branch  2 taken 98% (fallthrough)
branch  3 taken 2%
branch  4 taken 99% (fallthrough)
branch  5 taken 1%
branch  6 taken 99% (fallthrough)
branch  7 taken 1%
branch  8 taken 1% (fallthrough)
branch  9 taken 99%
     1719:  896:	  drawCard(currentPlayer, state);
call    0 returned 100%
     1719:  897:	  drawCard(currentPlayer, state);
call    0 returned 100%
        -:  898:	}
        -:  899:	else{//Action Card
    12428:  900:	  state->numActions = state->numActions + 2;
        -:  901:	}
        -:  902:      }
        -:  903:	    
     6046:  904:      return 0;
        -:  905:		
        -:  906:    case ambassador:
     8167:  907:      j = 0;		//used to check if player has enough cards to discard
        -:  908:
     8167:  909:      if (choice2 > 2 || choice2 < 0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  910:	{
    #####:  911:	  return -1;				
        -:  912:	}
        -:  913:
     8167:  914:      if (choice1 == handPos)
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
        -:  915:	{
     1672:  916:	  return -1;
        -:  917:	}
        -:  918:
    38936:  919:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -:  920:	{
    32441:  921:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
branch  2 taken 18% (fallthrough)
branch  3 taken 82%
branch  4 taken 55% (fallthrough)
branch  5 taken 45%
        -:  922:	    {
     2565:  923:	      j++;
        -:  924:	    }
        -:  925:	}
     6495:  926:      if (j < choice2)
branch  0 taken 61% (fallthrough)
branch  1 taken 39%
        -:  927:	{
     3930:  928:	  return -1;				
        -:  929:	}
        -:  930:
        -:  931:      if (DEBUG) 
        -:  932:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  933:
        -:  934:      //increase supply count for choosen card by amount being discarded
     2565:  935:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  936:			
        -:  937:      //each other player gains a copy of revealed card
    10159:  938:      for (i = 0; i < state->numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  939:	{
     7594:  940:	  if (i != currentPlayer)
branch  0 taken 66% (fallthrough)
branch  1 taken 34%
        -:  941:	    {
     5029:  942:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 returned 100%
        -:  943:	    }
        -:  944:	}
        -:  945:
        -:  946:      //discard played card from hand
     2565:  947:      discardCard(handPos, currentPlayer, state, 0);			
call    0 returned 100%
        -:  948:
        -:  949:      //trash copies of cards returned to supply
     5130:  950:      for (j = 0; j < choice2; j++)
branch  0 taken 50%
branch  1 taken 50% (fallthrough)
        -:  951:	{
     4197:  952:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 taken 100%
branch  1 taken 0% (fallthrough)
        -:  953:	    {
     4197:  954:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 taken 61% (fallthrough)
branch  1 taken 39%
        -:  955:		{
     2565:  956:		  discardCard(i, currentPlayer, state, 1);
call    0 returned 100%
     2565:  957:		  break;
        -:  958:		}
        -:  959:	    }
        -:  960:	}			
        -:  961:
     2565:  962:      return 0;
        -:  963:		
        -:  964:    case cutpurse:
        -:  965:
     1863:  966:      updateCoins(currentPlayer, state, 2);
call    0 returned 100%
     7752:  967:      for (i = 0; i < state->numPlayers; i++)
branch  0 taken 76%
branch  1 taken 24% (fallthrough)
        -:  968:	{
     5889:  969:	  if (i != currentPlayer)
branch  0 taken 68% (fallthrough)
branch  1 taken 32%
        -:  970:	    {
     4061:  971:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 taken 2%
branch  1 taken 98% (fallthrough)
        -:  972:		{
       69:  973:		  if (state->hand[i][j] == copper)
branch  0 taken 49% (fallthrough)
branch  1 taken 51%
        -:  974:		    {
       34:  975:		      discardCard(j, i, state, 0);
call    0 returned 100%
       34:  976:		      break;
        -:  977:		    }
       35:  978:		  if (j == state->handCount[i])
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  979:		    {
    #####:  980:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -:  981:			{
        -:  982:			  if (DEBUG)
        -:  983:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -:  984:			}	
    #####:  985:		      break;
        -:  986:		    }		
        -:  987:		}
        -:  988:					
        -:  989:	    }
        -:  990:				
        -:  991:	}				
        -:  992:
        -:  993:      //discard played card from hand
     1863:  994:      discardCard(handPos, currentPlayer, state, 0);			
call    0 returned 100%
        -:  995:
     1863:  996:      return 0;
        -:  997:
        -:  998:		
        -:  999:    case embargo: 
        -: 1000:      //+2 Coins
     5214: 1001:      state->coins = state->coins + 2;
        -: 1002:			
        -: 1003:      //see if selected pile is in play
     5214: 1004:      if ( state->supplyCount[choice1] == -1 )
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
        -: 1005:	{
     1031: 1006:	  return -1;
        -: 1007:	}
        -: 1008:			
        -: 1009:      //add embargo token to selected supply pile
     4183: 1010:      state->embargoTokens[choice1]++;
        -: 1011:			
        -: 1012:      //trash card
     4183: 1013:      discardCard(handPos, currentPlayer, state, 1);		
call    0 returned 100%
     4183: 1014:      return 0;
        -: 1015:		
        -: 1016:    case outpost:
        -: 1017:      //set outpost flag
    #####: 1018:      state->outpostPlayed++;
        -: 1019:			
        -: 1020:      //discard card
    #####: 1021:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1022:      return 0;
        -: 1023:		
        -: 1024:    case salvager:
        -: 1025:      //+1 buy
    #####: 1026:      state->numBuys++;
        -: 1027:			
    #####: 1028:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1029:	{
        -: 1030:	  //gain coins equal to trashed card
    #####: 1031:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1032:	  //trash card
    #####: 1033:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1034:	}
        -: 1035:			
        -: 1036:      //discard card
    #####: 1037:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1038:      return 0;
        -: 1039:		
        -: 1040:    case sea_hag:
    42766: 1041:      for (i = 0; i < state->numPlayers; i++){
branch  0 taken 76%
branch  1 taken 24% (fallthrough)
    32426: 1042:	if (i != currentPlayer){
branch  0 taken 68% (fallthrough)
branch  1 taken 32%
    22086: 1043:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    22086: 1044:	  state->discardCount[i]++;
    22086: 1045:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1046:	}
        -: 1047:      }
    10340: 1048:      return 0;
        -: 1049:		
        -: 1050:    case treasure_map:
        -: 1051:      //search hand for another treasure_map
    #####: 1052:      index = -1;
    #####: 1053:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1054:	{
    #####: 1055:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1056:	    {
    #####: 1057:	      index = i;
    #####: 1058:	      break;
        -: 1059:	    }
        -: 1060:	}
    #####: 1061:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1062:	{
        -: 1063:	  //trash both treasure cards
    #####: 1064:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1065:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1066:
        -: 1067:	  //gain 4 Gold cards
    #####: 1068:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1069:	    {
    #####: 1070:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1071:	    }
        -: 1072:				
        -: 1073:	  //return success
    #####: 1074:	  return 1;
        -: 1075:	}
        -: 1076:			
        -: 1077:      //no second treasure_map found in hand
    #####: 1078:      return -1;
        -: 1079:    }
        -: 1080:	
    #####: 1081:  return -1;
        -: 1082:}
        -: 1083:
function discardCard called 25298 returned 100% blocks executed 89%
    25298: 1084:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1085:{
        -: 1086:	
        -: 1087:  //if card is not trashed, added to Played pile 
    25298: 1088:  if (trashFlag < 1)
branch  0 taken 73% (fallthrough)
branch  1 taken 27%
        -: 1089:    {
        -: 1090:      //add card to played pile
    18550: 1091:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    18550: 1092:      state->playedCardCount++;
        -: 1093:    }
        -: 1094:	
        -: 1095:  //set played card to -1
    25298: 1096:  state->hand[currentPlayer][handPos] = -1;
        -: 1097:	
        -: 1098:  //remove card from player's hand
    25298: 1099:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 5% (fallthrough)
branch  1 taken 95%
        -: 1100:    {
        -: 1101:      //reduce number of cards in hand
     1237: 1102:      state->handCount[currentPlayer]--;
        -: 1103:    }
    24061: 1104:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1105:    {
        -: 1106:      //reduce number of cards in hand
    #####: 1107:      state->handCount[currentPlayer]--;
        -: 1108:    }
        -: 1109:  else 	
        -: 1110:    {
        -: 1111:      //replace discarded card with last card in hand
    24061: 1112:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1113:      //set last card to -1
    24061: 1114:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1115:      //reduce number of cards in hand
    24061: 1116:      state->handCount[currentPlayer]--;
        -: 1117:    }
        -: 1118:	
    25298: 1119:  return 0;
        -: 1120:}
        -: 1121:
function gainCard called 113592 returned 100% blocks executed 70%
   113592: 1122:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1123:{
        -: 1124:  //Note: supplyPos is enum of choosen card
        -: 1125:	
        -: 1126:  //check if supply pile is empty (0) or card is not used in game (-1)
   113592: 1127:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -: 1128:    {
    #####: 1129:      return -1;
        -: 1130:    }
        -: 1131:	
        -: 1132:  //added card for [whoseTurn] current player:
        -: 1133:  // toFlag = 0 : add to discard
        -: 1134:  // toFlag = 1 : add to deck
        -: 1135:  // toFlag = 2 : add to hand
        -: 1136:
   113592: 1137:  if (toFlag == 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1138:    {
    #####: 1139:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1140:      state->deckCount[player]++;
        -: 1141:    }
   113592: 1142:  else if (toFlag == 2)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1143:    {
    #####: 1144:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1145:      state->handCount[player]++;
        -: 1146:    }
        -: 1147:  else
        -: 1148:    {
   113592: 1149:      state->discard[player][ state->discardCount[player] ] = supplyPos;
   113592: 1150:      state->discardCount[player]++;
        -: 1151:    }
        -: 1152:	
        -: 1153:  //decrease number in supply pile
   113592: 1154:  state->supplyCount[supplyPos]--;
        -: 1155:	 
   113592: 1156:  return 0;
        -: 1157:}
        -: 1158:
function updateCoins called 236641 returned 100% blocks executed 100%
   236641: 1159:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1160:{
        -: 1161:  int i;
        -: 1162:	
        -: 1163:  //reset coin count
   236641: 1164:  state->coins = 0;
        -: 1165:
        -: 1166:  //add coins for each Treasure card in player's hand
  1404058: 1167:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1168:    {
  1167417: 1169:      if (state->hand[player][i] == copper)
branch  0 taken 40% (fallthrough)
branch  1 taken 60%
        -: 1170:	{
   470158: 1171:	  state->coins += 1;
        -: 1172:	}
   697259: 1173:      else if (state->hand[player][i] == silver)
branch  0 taken 13% (fallthrough)
branch  1 taken 87%
        -: 1174:	{
    88945: 1175:	  state->coins += 2;
        -: 1176:	}
   608314: 1177:      else if (state->hand[player][i] == gold)
branch  0 taken 5% (fallthrough)
branch  1 taken 95%
        -: 1178:	{
    29902: 1179:	  state->coins += 3;
        -: 1180:	}	
        -: 1181:    }	
        -: 1182:
        -: 1183:  //add bonus
   236641: 1184:  state->coins += bonus;
        -: 1185:
   236641: 1186:  return 0;
        -: 1187:}
        -: 1188:
function adventureCard called 1575 returned 100% blocks executed 100%
     1575: 1189:int adventureCard(int currentPlayer,struct gameState *state)
        -: 1190:{	
     1575: 1191:	int cardDrawn = 0;
     1575: 1192:	int drawntreasure = 0;
     1575: 1193:	int z = 0;
        -: 1194:	int temphand[MAX_HAND];
     9601: 1195:	while(drawntreasure<2)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -: 1196:	{
     6451: 1197:		if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 5% (fallthrough)
branch  1 taken 95%
      330: 1198:			shuffle(currentPlayer, state);
call    0 returned 100%
        -: 1199:		}
     6451: 1200:		drawCard(currentPlayer, state);
call    0 returned 100%
     6451: 1201:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
     6451: 1202:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 71% (fallthrough)
branch  1 taken 29%
branch  2 taken 83% (fallthrough)
branch  3 taken 17%
branch  4 taken 12% (fallthrough)
branch  5 taken 88%
     3150: 1203:			drawntreasure++;
        -: 1204:		else{
     3301: 1205:			temphand[z]=cardDrawn;
     3301: 1206:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
     3301: 1207:			z++;
        -: 1208:		}
        -: 1209:	}
     6451: 1210:	while(z-1>=0){
branch  0 taken 68%
branch  1 taken 32% (fallthrough)
     3301: 1211:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
     3301: 1212:		z=z-1;
        -: 1213:	}
     1575: 1214:	return 0;
        -: 1215:}
function council_roomCard called 1911 returned 100% blocks executed 100%
     1911: 1216:int council_roomCard(int currentPlayer,struct gameState *state,int handPos )
        -: 1217:{
        -: 1218:	//+4 Cards
        -: 1219:	int i;
     9555: 1220:	for (i = 0; i < 4; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -: 1221:	{
     7644: 1222:	  drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1223:	}
        -: 1224:
        -: 1225:	//+1 Buy
     1911: 1226:	state->numBuys++;
        -: 1227:
        -: 1228:	//Each other player draws a card
     8495: 1229:	for (i = 0; i < state->numPlayers; i++)
branch  0 taken 78%
branch  1 taken 22% (fallthrough)
        -: 1230:	{
     6584: 1231:	  if ( i != currentPlayer )
branch  0 taken 71% (fallthrough)
branch  1 taken 29%
        -: 1232:	    {
     4673: 1233:	      drawCard(i, state);
call    0 returned 100%
        -: 1234:	    }
        -: 1235:	}
        -: 1236:
        -: 1237:	//put played card in played card pile
     1911: 1238:	discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -: 1239:
     1911: 1240:	return 0;
        -: 1241:}
function feastCard called 0 returned 0% blocks executed 0%
    #####: 1242:int feastCard(int currentPlayer,struct gameState *state, int choice1)
        -: 1243:{
        -: 1244:	int temphand[MAX_HAND];
        -: 1245:	//gain card with cost up to 5
        -: 1246:      //Backup hand
        -: 1247:	int i;
        -: 1248:	int x;
    #####: 1249:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1250:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####: 1251:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -: 1252:      }
        -: 1253:      //Backup hand
        -: 1254:
        -: 1255:      //Update Coins for Buy
    #####: 1256:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####: 1257:      x = 1;//Condition to loop on
    #####: 1258:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####: 1259:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1260:	  if (DEBUG)
        -: 1261:	    printf("None of that card left, sorry!\n");
        -: 1262:
        -: 1263:	  if (DEBUG){
        -: 1264:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -: 1265:	  }
        -: 1266:	}
    #####: 1267:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1268:	  printf("That card is too expensive!\n");
call    0 never executed
        -: 1269:
        -: 1270:	  if (DEBUG){
        -: 1271:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -: 1272:	  }
        -: 1273:	}
        -: 1274:	else{
        -: 1275:
        -: 1276:	  if (DEBUG){
        -: 1277:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1278:	  }
        -: 1279:
    #####: 1280:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####: 1281:	  x = 0;//No more buying cards
        -: 1282:
        -: 1283:	  if (DEBUG){
        -: 1284:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1285:	  }
        -: 1286:
        -: 1287:	}
        -: 1288:      }
        -: 1289:
        -: 1290:      //Reset Hand
    #####: 1291:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1292:	state->hand[currentPlayer][i] = temphand[i];
    #####: 1293:	temphand[i] = -1;
        -: 1294:      }
        -: 1295:      //Reset Hand
        -: 1296:
    #####: 1297:      return 0;
        -: 1298:}
function mineCard called 5912 returned 100% blocks executed 50%
     5912: 1299:int mineCard(int currentPlayer,struct gameState *state, int choice1,int choice2,int handPos)
        -: 1300:{
        -: 1301:	int i;
     5912: 1302:   int j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1303:
     5912: 1304:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
branch  2 taken 44% (fallthrough)
branch  3 taken 56%
        -: 1305:	{
     3428: 1306:	  return -1;
        -: 1307:	}
        -: 1308:
     2484: 1309:      if (choice2 > treasure_map || choice2 < curse)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -: 1310:	{
    #####: 1311:	  return -1;
        -: 1312:	}
        -: 1313:
     2484: 1314:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        -: 1315:	{
     2484: 1316:	  return -1;
        -: 1317:	}
        -: 1318:      //gainCard(choice2, state, 2, currentPlayer);
    #####: 1319:      gainCard(choice1, state, 2, currentPlayer);
call    0 never executed
        -: 1320:
        -: 1321:      //discard card from hand
    #####: 1322:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1323:
        -: 1324:      //discard trashed card
    #####: 1325:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1326:	{
    #####: 1327:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -: 1328:	    {
    #####: 1329:	      discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####: 1330:	      break;
        -: 1331:	    }
        -: 1332:	}
        -: 1333:
    #####: 1334:      return 0;
        -: 1335:}
function remodelCard called 0 returned 0% blocks executed 0%
    #####: 1336:int remodelCard(int currentPlayer,struct gameState *state, int choice1,int choice2,int handPos)
        -: 1337:{
        -: 1338:      int i;
    #####: 1339:      int j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1340:
    #####: 1341:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1342:	{
    #####: 1343:	  return -1;
        -: 1344:	}
        -: 1345:
    #####: 1346:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -: 1347:
        -: 1348:      //discard card from hand
        -: 1349:      //discardCard(handPos, currentPlayer, state, 0);
    #####: 1350:      discardCard(0, currentPlayer, state, 0);
call    0 never executed
        -: 1351:      //discard trashed card
    #####: 1352:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1353:	{
    #####: 1354:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -: 1355:	    {
    #####: 1356:	      discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####: 1357:	      break;
        -: 1358:	    }
        -: 1359:	}
        -: 1360:
        -: 1361:
    #####: 1362:      return 0;
        -: 1363:}
        -: 1364://end of dominion.c
        -: 1365:
